# See https://github.com/tauri-apps/tauri-action for more information
name: Release

on:
  workflow_dispatch:

jobs:
  create-version-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
    permissions:
      contents: write
    steps:
      - name: Generate GitHub App Token
        id: get_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.RELEASE_BOT_APP_ID }}
          private-key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.get_token.outputs.token }}
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install frontend dependencies
        run: npm ci

      - name: Run lint checks
        run: npm run lint

      - name: Run formatting checks
        run: npm run format:check

      - name: Run tests
        run: npm run test

      - name: Install Tauri dependencies (Ubuntu)
        run: |
          sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libglib2.0-dev

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      # We use node commands here instead of sed/awk/etc., since those do not work on Windows by default.
      - name: Create version tag
        id: versioning
        run: |
          if [ "$GITHUB_REF_NAME" != "main" ]; then
            echo "Error: You must be on the main branch to create a version tag. Current branch: $GITHUB_REF_NAME"
            exit 1
          fi

          git config --global user.name "nicebucket-release-bot[bot]"
          git config --global user.email "2131833+nicebucket-release-bot[bot]@users.noreply.github.com"

          echo "Creating version tag from main branch..."
          npx standard-version

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update tauri.conf.json version (looking for "version" field near top of file)
          sed -i '0,/^  "version":/{s/^  "version": ".*"/  "version": "'$NEW_VERSION'"/;}' src-tauri/tauri.conf.json

          # Update Cargo.toml version (only in the [package] section)
          sed -i '/^\[package\]$/,/^\[.*\]$/{s/^version = ".*"/version = "'$NEW_VERSION'"/;}' src-tauri/Cargo.toml

          # Update Cargo.lock to reflect the version change (only for nicebucket package)
          sed -i '/^name = "nicebucket"$/,/^$/{s/^version = ".*"/version = "'$NEW_VERSION'"/;}' src-tauri/Cargo.lock

          git add src-tauri/tauri.conf.json src-tauri/Cargo.toml src-tauri/Cargo.lock
          git commit --amend --no-edit

          # Update the tag to point to the amended commit
          git tag -d v$NEW_VERSION
          git tag v$NEW_VERSION

          # Pull any changes that might have been pushed during release creation
          git pull --rebase origin main
          git push origin HEAD
          git push origin v$NEW_VERSION --force

  publish-tauri:
    needs: create-version-tag
    env:
      APP_VERSION: ${{ needs.create-version-tag.outputs.version }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.create-version-tag.outputs.version }}
          fetch-depth: 0

      - name: Verify version files
        run: |
          echo "Expected version: ${{ needs.create-version-tag.outputs.version }}"
          echo "package.json version: $(node -p "require('./package.json').version")"
          echo "tauri.conf.json version: $(node -p "require('./src-tauri/tauri.conf.json').version")"
          echo "Cargo.toml version: $(grep '^version =' src-tauri/Cargo.toml | head -1)"

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Clean and install frontend dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          if (Test-Path "node_modules") { Remove-Item -Recurse -Force "node_modules" }
          if (Test-Path "package-lock.json") { Remove-Item -Force "package-lock.json" }
          npm install
        shell: pwsh

      - name: Clean and install frontend dependencies (Unix)
        if: matrix.platform != 'windows-latest'
        run: |
          rm -rf node_modules package-lock.json
          npm install

      # TODO: Code signing temporarily disabled - needs to be fixed
      # see https://github.com/tauri-apps/tauri-action/blob/dev/examples/publish-to-auto-release-universal-macos-app-with-signing-certificate.yml
      # - name: Import Apple Developer Certificate
      #   if: matrix.platform == 'macos-latest'
      #   env:
      #     APPLE_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
      #     APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
      #     security set-keychain-settings -t 3600 -u build.keychain
      #     security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
      #     security find-identity -v -p codesigning build.keychain

      # - name: Verify certificate
      #   if: matrix.platform == 'macos-latest'
      #   run: |
      #     CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
      #     CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
      #     echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
      #     echo "Certificate imported."

      - uses: tauri-apps/tauri-action@v0
        # The notarization for MacOS often takes very long, let's monitor this
        timeout-minutes: 360
        # TODO: Code signing environment variables temporarily disabled
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # APPLE_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          tagName: v${{ env.APP_VERSION }}
          releaseName: "v${{ env.APP_VERSION }}"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: false
          prerelease: false
          appVersion: ${{ env.APP_VERSION }}
          args: ${{ matrix.args }}
