
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async connectToS3(config: ConnectionConfig) : Promise<Result<Connection, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("connect_to_s3", { config }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listBuckets(connection: Connection) : Promise<Result<BucketInfo[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("list_buckets", { connection }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listObjects(opts: ListObjectsOptions) : Promise<Result<ObjectInfo[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("list_objects", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadObject(opts: DownloadObjectOptions) : Promise<Result<number[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download_object", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadObjects(opts: DownloadObjectsOptions) : Promise<Result<([string, number[]])[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download_objects", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteObjects(opts: DeleteObjectsOptions) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_objects", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadFolder(opts: DownloadFolderOptions) : Promise<Result<number[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download_folder", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteFolder(opts: DeleteFolderOptions) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_folder", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async uploadObjects(opts: UploadObjectsOptions) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("upload_objects", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createFolder(opts: CreateFolderOptions) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_folder", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async moveObjects(opts: MoveObjectsOptions) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("move_objects", { opts }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveConnection(config: ConnectionConfig) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_connection", { config }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadSavedConnections() : Promise<Result<SavedConnectionConfig[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_saved_connections") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteSavedConnection(uuid: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_saved_connection", { uuid }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async isConnectionSaved(uuid: string) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("is_connection_saved", { uuid }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async isConnectionDuplicate(config: ConnectionConfig) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("is_connection_duplicate", { config }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type BucketInfo = { provider: BucketProvider; name: string; region: string; endpoint_url: string; creation_date: string | null }
export type BucketProvider = "S3" | "R2" | "Custom"
export type CommonConfig = { label: string; access_key_id: string; secret_access_key: string }
export type CommonOperationOptions = { connection: Connection; bucket_region: string | null }
export type Connection = { id: string; label: string; provider: BucketProvider }
export type ConnectionConfig = { S3: S3Config } | { R2: R2Config } | { Custom: CustomConfig }
export type CreateFolderOptions = { common: CommonOperationOptions; bucket_name: string; folder_key: string }
export type CustomConfig = { common: CommonConfig; endpoint_url: string }
export type DeleteFolderOptions = { common: CommonOperationOptions; bucket_name: string; prefix: string }
export type DeleteObjectsOptions = { common: CommonOperationOptions; bucket_name: string; keys: string[] }
export type DownloadFolderOptions = { common: CommonOperationOptions; bucket_name: string; prefix: string }
export type DownloadObjectOptions = { common: CommonOperationOptions; bucket_name: string; key: string }
export type DownloadObjectsOptions = { common: CommonOperationOptions; bucket_name: string; keys: string[] }
export type ListObjectsOptions = { common: CommonOperationOptions; bucket_name: string; prefix: string | null }
export type MoveObjectsOptions = { common: CommonOperationOptions; bucket_name: string; keys: string[]; destination_prefix: string }
export type ObjectInfo = { key: string; size: number | null; last_modified: string | null; storage_class: string | null; is_folder: boolean }
export type R2Config = { common: CommonConfig; account_id: string }
export type S3Config = { common: CommonConfig }
export type SavedConnectionConfig = { S3: SavedS3Config } | { R2: SavedR2Config } | { Custom: SavedCustomConfig }
export type SavedCustomConfig = { common: CommonConfig; endpoint_url: string; uuid: string }
export type SavedR2Config = { common: CommonConfig; account_id: string; uuid: string }
export type SavedS3Config = { common: CommonConfig; uuid: string }
export type UploadObjectsOptions = { common: CommonOperationOptions; bucket_name: string; prefix: string | null; file_paths: string[] }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
