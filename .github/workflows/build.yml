name: Build

on:
  workflow_dispatch:
  pull_request:

jobs:
  pr-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache Node dependencies
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Frontend lint checks
        run: npm run lint

      - name: Frontend formatting checks
        run: npm run format:check

      - name: Frontend tests
        run: npm run test

      - name: Frontend build
        run: npm run build

      - name: Tauri dependencies (Ubuntu)
        run: |
          sudo apt-get update && sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf webkit2gtk-driver

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy,rustfmt

      - name: Cache Cargo dependencies
        id: cargo-cache-restore
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }} # Using specific lockfile
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Running the full Tauri build takes ~15 minutes, which is too long for PR checks.
      # We can be very confident that the app still works as intended, if the following checks pass.
      - name: Cargo Test (includes full build)
        working-directory: src-tauri
        run: cargo test --locked --all-targets

      - name: Cargo Format Checks
        working-directory: src-tauri
        run: cargo fmt -- --check

      - name: Cargo Clippy (Linter)
        working-directory: src-tauri
        run: cargo clippy --locked -- -D warnings

      # TODO: investigate e2e issues, see https://github.com/matthiasweiss/s3-gui-demo/actions/runs/18214103174/job/51859898196?pr=2
      # - name: Install tauri-driver
      #   run: cargo install tauri-driver --locked

      # - name: Run e2e tests
      #   working-directory: scripts
      #   run: npm run test:e2e
